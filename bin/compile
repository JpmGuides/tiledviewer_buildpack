#install OpenCV

set -e

indent() {
  sed -u 's/^/       /'
}

echo 'Compiling ...'

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
CACHED_DIRS=".heroku"

build=$BUILD_DIR
cache=$CACHE_DIR

mkdir -p ${cache}

cmake_version="2.8.12.1"
cmake_url="http://www.cmake.org/files/v2.8/cmake-2.8.12.1.tar.gz"
cmake_file="cmake-${cmake_version}.tar.gz"
cmake_tar_dir="cmake-${cmake_version}"

opencv_repository="git://code.opencv.org/opencv.git"
opencv_version="2.4.5"
opencv_dir="opencv-${opencv_version}"

cache_target=${cache}/${cmake_file}
build_target=${build}/.heroku
target=/app/.heroku

if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Bulding..." | indent
  cd $build

  echo "Compiling cmake v${cmake_version}..." | indent
  #Compile cmake
  curl -s ${cmake_url} > ${cmake_file}
  tar zxf ${cmake_file}
  cd ${cmake_tar_dir}
  ./bootstrap --prefix=${target} | indent
  make | indent
  make install | indent
  cd ..

  #Create cache slug
  tar czf ${cache_target} -C ${target} .
fi

# mkdir -p ${build_target}
# tar xzf ${cache_target} -C ${build_target}
# PATH=${build_target}/bin:$PATH

# cache_target=${cache}/${opencv_dir}
# build_target=${build}/.heroku
# target=/app/.heroku

# if [ ! -f ${cache_target} ]; then
  # echo "No cached compile detected. Bulding..." | indent
  # cd $build

  # echo "Compiling OpenCV v${opencv_version}..." | indent
  #Compile OpenCV
  # git clone ${opencv_repository} ${opencv_dir}
  # cd ${opencv_dir}
  # git checkout tags/${opencv_version}
  # mkdir build
  # cd build

  # cmake -DBUILD_SHARED_LIBS=NO DCMAKE_SHARED_LINKER_FLAGS="-fPIC" -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DWITH_OPENEXR=OFF -DCMAKE_FIND_ROOT_PATH=${target} -DCMAKE_INSTALL_PREFIX=${target} .. | indent
  # make -j 4 install | indent
  # cd ..
# fi
